{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Lance-Ray Integration A Python library that provides seamless integration between Ray and Lance for distributed columnar data processing. Overview Lance-Ray combines the distributed computing capabilities of Ray with the efficient columnar storage format of Lance, enabling scalable data processing workflows with optimal performance. Features Distributed Lance Operations: Leverage Ray\u2019s distributed computing for Lance dataset operations. Seamless Data Movement: Efficiently move data between Ray and Lance datasets. Optimized I/O: Fast read and write operations on Lance datasets with Ray integration. Parallel Processing: Support for concurrent batch operations on distributed Lance data. Quick Start import ray from lance_ray import read_lance, write_lance ray.init() # Write a pandas DataFrame to Lance format import pandas as pd df = pd.DataFrame({\"a\": [1, 2, 3], \"b\": [\"x\", \"y\", \"z\"]}) write_lance(\"example.lance\", df) # Read the dataset back as a Ray Dataset ds = read_lance(\"example.lance\") print(ds.take(3))","title":"Home"},{"location":"#lance-ray-integration","text":"A Python library that provides seamless integration between Ray and Lance for distributed columnar data processing.","title":"Lance-Ray Integration"},{"location":"#overview","text":"Lance-Ray combines the distributed computing capabilities of Ray with the efficient columnar storage format of Lance, enabling scalable data processing workflows with optimal performance.","title":"Overview"},{"location":"#features","text":"Distributed Lance Operations: Leverage Ray\u2019s distributed computing for Lance dataset operations. Seamless Data Movement: Efficiently move data between Ray and Lance datasets. Optimized I/O: Fast read and write operations on Lance datasets with Ray integration. Parallel Processing: Support for concurrent batch operations on distributed Lance data.","title":"Features"},{"location":"#quick-start","text":"import ray from lance_ray import read_lance, write_lance ray.init() # Write a pandas DataFrame to Lance format import pandas as pd df = pd.DataFrame({\"a\": [1, 2, 3], \"b\": [\"x\", \"y\", \"z\"]}) write_lance(\"example.lance\", df) # Read the dataset back as a Ray Dataset ds = read_lance(\"example.lance\") print(ds.take(3))","title":"Quick Start"},{"location":"contributing/","text":"Contributing to lance-ray Development setup Install the latest development version with all dependencies: git clone https://github.com/<your-username>/lance-ray.git cd lance-ray uv pip install -e .[dev] Requirements Python >= 3.8 Ray >= 2.40.0 PyLance >= 0.30.0 lance-namespace >= 0.0.5 PyArrow >= 17.0.0 Pandas >= 2.2.0 NumPy >= 2.0.0 Running Tests To run all tests using pytest : uv run pytest","title":"Contributing"},{"location":"contributing/#contributing-to-lance-ray","text":"","title":"Contributing to lance-ray"},{"location":"contributing/#development-setup","text":"Install the latest development version with all dependencies: git clone https://github.com/<your-username>/lance-ray.git cd lance-ray uv pip install -e .[dev]","title":"Development setup"},{"location":"contributing/#requirements","text":"Python >= 3.8 Ray >= 2.40.0 PyLance >= 0.30.0 lance-namespace >= 0.0.5 PyArrow >= 17.0.0 Pandas >= 2.2.0 NumPy >= 2.0.0","title":"Requirements"},{"location":"contributing/#running-tests","text":"To run all tests using pytest : uv run pytest","title":"Running Tests"},{"location":"examples/","text":"Examples Basic Usage import ray import pandas as pd from lance_ray import read_lance, write_lance ray.init() # Write a DataFrame to Lance df = pd.DataFrame({\"a\": [1, 2, 3], \"b\": [\"x\", \"y\", \"z\"]}) write_lance(\"example.lance\", df) # Read the dataset back ds = read_lance(\"example.lance\") print(ds.take(3)) # Read only specific columns ds = read_lance(\"example.lance\", columns=[\"a\"]) print(ds.take(3)) # Read with a filter expression filtered_ds = read_lance(\"example.lance\", filters=\"a > 1\") print(filtered_ds.take(3)) print(f\"Filtered count: {filtered_ds.count()}\") ## Advanced Usage # Process data in parallel using Ray tasks @ray.remote def process_partition(partition): return [x * 2 for x in partition[\"a\"]] # Split the dataset into 2 partitions ds = read_lance(\"example.lance\") partitions = ds.split(2) # Process each partition in parallel results = ray.get([process_partition.remote(p) for p in partitions]) print(results)","title":"Examples"},{"location":"examples/#examples","text":"","title":"Examples"},{"location":"examples/#basic-usage","text":"import ray import pandas as pd from lance_ray import read_lance, write_lance ray.init() # Write a DataFrame to Lance df = pd.DataFrame({\"a\": [1, 2, 3], \"b\": [\"x\", \"y\", \"z\"]}) write_lance(\"example.lance\", df) # Read the dataset back ds = read_lance(\"example.lance\") print(ds.take(3)) # Read only specific columns ds = read_lance(\"example.lance\", columns=[\"a\"]) print(ds.take(3)) # Read with a filter expression filtered_ds = read_lance(\"example.lance\", filters=\"a > 1\") print(filtered_ds.take(3)) print(f\"Filtered count: {filtered_ds.count()}\") ## Advanced Usage # Process data in parallel using Ray tasks @ray.remote def process_partition(partition): return [x * 2 for x in partition[\"a\"]] # Split the dataset into 2 partitions ds = read_lance(\"example.lance\") partitions = ds.split(2) # Process each partition in parallel results = ray.get([process_partition.remote(p) for p in partitions]) print(results)","title":"Basic Usage"}]}